#pragma checksum "D:\GitKraken\asp.NET\MyWeb\MyWeb\Views\Home\SecondSite.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "5155165e971820c3c229b92f3ea07b2a760046b5"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_SecondSite), @"mvc.1.0.view", @"/Views/Home/SecondSite.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/SecondSite.cshtml", typeof(AspNetCore.Views_Home_SecondSite))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "D:\GitKraken\asp.NET\MyWeb\MyWeb\Views\_ViewImports.cshtml"
using MyWeb;

#line default
#line hidden
#line 2 "D:\GitKraken\asp.NET\MyWeb\MyWeb\Views\_ViewImports.cshtml"
using MyWeb.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"5155165e971820c3c229b92f3ea07b2a760046b5", @"/Views/Home/SecondSite.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a4221c565102d6b4904ec52217f6417507a218be", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_SecondSite : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 1728, true);
            WriteLiteral(@"<style>
    body {
        text-align: center;
        background-color: antiquewhite;
        color: indianred;
        font-size : medium;
        font-family: 'Century Gothic';
    }
    button{
        width: 40px;
        height: 40px;
        color: darksalmon;
        font-weight : 1000;
    }
</style>
<p>Зачем вам двоящаяса реклама?</p>
<img src=""https://i.pinimg.com/originals/37/ff/41/37ff419ab7ab5071fb3999e3f9576676.jpg"" width=""200"" />
<div id=""storage""></div>
<script>
    function Res() {
        let req = new XMLHttpRequest;
        req.open(""GET"", `/Home/Check?piece=${selector}&from0=${pointF}&to0=${pointS}`);
        req.send();
        req.onreadystatechange = function () {
            if (req.readyState === 4) {
                document.getElementById(""result"").innerText = req.responseText;
            }
        }
    }
    var pointF;
    var pointS;
    var selector;
    function Click(but) {
        but.innerText = selector[0];
        if (pointS !== undefi");
            WriteLiteral(@"ned && pointF !== undefined) document.getElementById(pointF).innerText = "" "";
        pointF = pointS;
        pointS = but.id;
        if (pointS !== undefined && pointF !== undefined) Res();
        
    }

    function Changer(select) {
        selector = select.value;
        document.getElementById(pointF).innerText = selector[0];
        document.getElementById(pointS).innerText = selector[0];
        if (pointS !== undefined && pointF !== undefined) Res();
    }
</script>
<br />
<p><b>И н т е р а к т и в ч и к и</b></p>
<br />
<div id=""result"" style=""color: mediumslateblue; font-size : x-large; font-family: 'Century Gothic'""></div>
<select onchange=""Changer(this)"">
    ");
            EndContext();
            BeginContext(1728, 17, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "17ba709a99c14b39a1cdbb46b1fe2545", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(1745, 6, true);
            WriteLiteral("\r\n    ");
            EndContext();
            BeginContext(1751, 21, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "0ad9d84680904049aafa16792ae95519", async() => {
                BeginContext(1759, 4, true);
                WriteLiteral("King");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(1772, 6, true);
            WriteLiteral("\r\n    ");
            EndContext();
            BeginContext(1778, 22, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "62af35ede92442588b1fad1e4055b3dc", async() => {
                BeginContext(1786, 5, true);
                WriteLiteral("Queen");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(1800, 6, true);
            WriteLiteral("\r\n    ");
            EndContext();
            BeginContext(1806, 21, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "aa322d50517448ebbd9bb6df8f5b5877", async() => {
                BeginContext(1814, 4, true);
                WriteLiteral("Rook");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(1827, 6, true);
            WriteLiteral("\r\n    ");
            EndContext();
            BeginContext(1833, 23, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f6516ae88a7446e9aca828b5252f0516", async() => {
                BeginContext(1841, 6, true);
                WriteLiteral("Bishop");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(1856, 6, true);
            WriteLiteral("\r\n    ");
            EndContext();
            BeginContext(1862, 23, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "2b65a961fc664b10abac2680ec5e39ee", async() => {
                BeginContext(1870, 6, true);
                WriteLiteral("Knight");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(1885, 6, true);
            WriteLiteral("\r\n    ");
            EndContext();
            BeginContext(1891, 21, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "b5b4b54d204142a88347f5a3df04c554", async() => {
                BeginContext(1899, 4, true);
                WriteLiteral("Pawn");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(1912, 7317, true);
            WriteLiteral(@"
</select>
<br />
<table class=""chess"" align=""center"">
    <tr>
        <td><button id=""a1"" style=""background-color: indianred;"" onclick=""Click(this)""></button>
        <td />
        <td><button id=""a2"" style=""background-color: white;"" onclick=""Click(this)""></button>
        <td />
        <td><button id=""a3"" style=""background-color: indianred;"" onclick=""Click(this)""></button>
        <td />
        <td><button id=""a4"" style=""background-color: white;"" onclick=""Click(this)""></button>
        <td />
        <td><button id=""a5"" style=""background-color: indianred;"" onclick=""Click(this)""></button>
        <td />
        <td><button id=""a6"" style=""background-color: white;"" onclick=""Click(this)""></button>
        <td />
        <td><button id=""a7"" style=""background-color: indianred;"" onclick=""Click(this)""></button>
        <td />
        <td><button id=""a8"" style=""background-color: white;"" onclick=""Click(this)""></button></td>
    </tr>
    <tr>
        <td><button id=""b1"" style=""background-col");
            WriteLiteral(@"or: white;"" onclick=""Click(this)""></button>
        <td />
        <td><button id=""b2"" style=""background-color: indianred;"" onclick=""Click(this)""></button>
        <td />
        <td><button id=""b3"" style=""background-color: white;"" onclick=""Click(this)""></button>
        <td />
        <td><button id=""b4"" style=""background-color: indianred;"" onclick=""Click(this)""></button>
        <td />
        <td><button id=""b5"" style=""background-color: white;"" onclick=""Click(this)""></button>
        <td />
        <td><button id=""b6"" style=""background-color: indianred;"" onclick=""Click(this)""></button>
        <td />
        <td><button id=""b7"" style=""background-color: white;"" onclick=""Click(this)""></button>
        <td />
        <td><button id=""b8"" style=""background-color: indianred;"" onclick=""Click(this)""></button></td>
    </tr>
    <tr>
        <td><button id=""c1"" style=""background-color: indianred;"" onclick=""Click(this)""></button>
        <td />
        <td><button id=""c2"" style=""background-color: ");
            WriteLiteral(@"white;"" onclick=""Click(this)""></button>
        <td />
        <td><button id=""c3"" style=""background-color: indianred;"" onclick=""Click(this)""></button>
        <td />
        <td><button id=""c4"" style=""background-color: white;"" onclick=""Click(this)""></button>
        <td />
        <td><button id=""c5"" style=""background-color: indianred;"" onclick=""Click(this)""></button>
        <td />
        <td><button id=""c6"" style=""background-color: white;"" onclick=""Click(this)""></button>
        <td />
        <td><button id=""c7"" style=""background-color: indianred;"" onclick=""Click(this)""></button>
        <td />
        <td><button id=""c8"" style=""background-color: white;"" onclick=""Click(this)""></button></td>
    </tr>
    <tr>
        <td><button id=""d1"" style=""background-color: white;"" onclick=""Click(this)""></button>
        <td />
        <td><button id=""d2"" style=""background-color: indianred;"" onclick=""Click(this)""></button>
        <td />
        <td><button id=""d3"" style=""background-color: white;"" ");
            WriteLiteral(@"onclick=""Click(this)""></button>
        <td />
        <td><button id=""d4"" style=""background-color: indianred;"" onclick=""Click(this)""></button>
        <td />
        <td><button id=""d5"" style=""background-color: white;"" onclick=""Click(this)""></button>
        <td />
        <td><button id=""d6"" style=""background-color: indianred;"" onclick=""Click(this)""></button>
        <td />
        <td><button id=""d7"" style=""background-color: white;"" onclick=""Click(this)""></button>
        <td />
        <td><button id=""d8"" style=""background-color: indianred;"" onclick=""Click(this)""></button></td>
    </tr>
    <tr>
        <td><button id=""e1"" style=""background-color: indianred;"" onclick=""Click(this)""></button>
        <td />
        <td><button id=""e2"" style=""background-color: white;"" onclick=""Click(this)""></button>
        <td />
        <td><button id=""e3"" style=""background-color: indianred;"" onclick=""Click(this)""></button>
        <td />
        <td><button id=""e4"" style=""background-color: white;"" oncl");
            WriteLiteral(@"ick=""Click(this)""></button>
        <td />
        <td><button id=""e5"" style=""background-color: indianred;"" onclick=""Click(this)""></button>
        <td />
        <td><button id=""e6"" style=""background-color: white;"" onclick=""Click(this)""></button>
        <td />
        <td><button id=""e7"" style=""background-color: indianred;"" onclick=""Click(this)""></button>
        <td />
        <td><button id=""e8"" style=""background-color: white;"" onclick=""Click(this)""></button></td>
    </tr>
    <tr>
        <td><button id=""f1"" style=""background-color: white;"" onclick=""Click(this)""></button>
        <td />
        <td><button id=""f2"" style=""background-color: indianred;"" onclick=""Click(this)""></button>
        <td />
        <td><button id=""f3"" style=""background-color: white;"" onclick=""Click(this)""></button>
        <td />
        <td><button id=""f4"" style=""background-color: indianred;"" onclick=""Click(this)""></button>
        <td />
        <td><button id=""f5"" style=""background-color: white;"" onclick=""Cli");
            WriteLiteral(@"ck(this)""></button>
        <td />
        <td><button id=""f6"" style=""background-color: indianred;"" onclick=""Click(this)""></button>
        <td />
        <td><button id=""f7"" style=""background-color: white;"" onclick=""Click(this)""></button>
        <td />
        <td><button id=""f8"" style=""background-color: indianred;"" onclick=""Click(this)""></button></td>
    </tr>
    <tr>
        <td><button id=""g1"" style=""background-color: indianred;"" onclick=""Click(this)""></button>
        <td />
        <td><button id=""g2"" style=""background-color: white;"" onclick=""Click(this)""></button>
        <td />
        <td><button id=""g3"" style=""background-color: indianred;"" onclick=""Click(this)""></button>
        <td />
        <td><button id=""g4"" style=""background-color: white;"" onclick=""Click(this)""></button>
        <td />
        <td><button id=""g5"" style=""background-color: indianred;"" onclick=""Click(this)""></button>
        <td />
        <td><button id=""g6"" style=""background-color: white;"" onclick=""Click(t");
            WriteLiteral(@"his)""></button>
        <td />
        <td><button id=""g7"" style=""background-color: indianred;"" onclick=""Click(this)""></button>
        <td />
        <td><button id=""g8"" style=""background-color: white;"" onclick=""Click(this)""></button></td>
    </tr>
    <tr>
        <td><button id=""h1"" style=""background-color: white;"" onclick=""Click(this)""></button>
        <td />
        <td><button id=""h2"" style=""background-color: indianred;"" onclick=""Click(this)""></button>
        <td />
        <td><button id=""h3"" style=""background-color: white;"" onclick=""Click(this)""></button>
        <td />
        <td><button id=""h4"" style=""background-color: indianred;"" onclick=""Click(this)""></button>
        <td />
        <td><button id=""h5"" style=""background-color: white;"" onclick=""Click(this)""></button>
        <td />
        <td><button id=""h6"" style=""background-color: indianred;"" onclick=""Click(this)""></button>
        <td />
        <td><button id=""h7"" style=""background-color: white;"" onclick=""Click(this)""></");
            WriteLiteral("button>\r\n        <td />\r\n        <td><button id=\"h8\" style=\"background-color: indianred;\" onclick=\"Click(this)\"></button></td>\r\n    </tr>\r\n</table>\r\n");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
